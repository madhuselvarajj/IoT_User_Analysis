<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.4.1"/>
    <errors>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!ret&amp;#039; is always true" verbose="Condition &amp;#039;!ret&amp;#039; is always true" cwe="571">
            <location file="post-10228.c" line="9" info="Condition &amp;#039;!ret&amp;#039; is always true"/>
            <location file="post-10228.c" line="6" info="Assuming that condition &amp;#039;ret&amp;#039; is not redundant"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: x" verbose="Uninitialized variable: x" cwe="457">
            <location file="post-10407.c" line="28"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-10534.c" line="44"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-10534.c" line="45"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-10534.c" line="57"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;content&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;content&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-12208.c" line="9"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-13135.c" line="10"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-13137.c" line="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-13260-3.c" line="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-13260-4.c" line="45"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;led_state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;led_state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-13267-4.c" line="2"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;switchOneState&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;switchOneState&amp;#039; shadows outer variable" cwe="398">
            <location file="post-14050.c" line="19" info="Shadow variable"/>
            <location file="post-14050.c" line="5" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;lastSwitchOneState&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;lastSwitchOneState&amp;#039; shadows outer variable" cwe="398">
            <location file="post-14050.c" line="20" info="Shadow variable"/>
            <location file="post-14050.c" line="6" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parameter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parameter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-14055-2.c" line="111"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;fifo_buffer[8]&amp;#039; accessed at index 8, which is out of bounds." verbose="Array &amp;#039;fifo_buffer[8]&amp;#039; accessed at index 8, which is out of bounds." cwe="788">
            <location file="post-14169.c" line="95"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;myByte&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;myByte&amp;#039; shadows outer variable" cwe="398">
            <location file="post-14304-2.c" line="98" info="Shadow variable"/>
            <location file="post-14304-2.c" line="53" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;myByte&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;myByte&amp;#039; shadows outer variable" cwe="398">
            <location file="post-14304.c" line="69" info="Shadow variable"/>
            <location file="post-14304.c" line="34" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;input_line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;input_line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-14352.c" line="118"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;input_pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;input_pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-14352.c" line="119"/>
        </error>
        <error id="sizeofwithsilentarraypointer" severity="warning" msg="Using &amp;#039;sizeof&amp;#039; on array given as function argument returns size of a pointer." verbose="Using &amp;#039;sizeof&amp;#039; for array given as function argument returns the size of a pointer. It does not return the size of the whole array in bytes as might be expected. For example, this code:&#10;     int f(char a[100]) {&#10;         return sizeof(a);&#10;     }&#10;returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 100 (the size of the array in bytes)." cwe="467">
            <location file="post-1447.c" line="4"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%d in format string (no. 2) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;signed short *&amp;#039;." verbose="%d in format string (no. 2) requires &amp;#039;int *&amp;#039; but the argument type is &amp;#039;signed short *&amp;#039;." cwe="686">
            <location file="post-16003.c" line="49"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;i&amp;lt;32&amp;#039; is redundant or the array &amp;#039;sensorArray[32]&amp;#039; is accessed at index 32, which is out of bounds." verbose="Either the condition &amp;#039;i&amp;lt;32&amp;#039; is redundant or the array &amp;#039;sensorArray[32]&amp;#039; is accessed at index 32, which is out of bounds." cwe="788">
            <location file="post-1605.c" line="41" info="Array index out of bounds"/>
            <location file="post-1605.c" line="39" info="i is incremented&amp;#039;, new value is 32"/>
            <location file="post-1605.c" line="37" info="Assuming that condition &amp;#039;i&amp;lt;32&amp;#039; is not redundant"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;i&amp;lt;32&amp;#039; is redundant or the array &amp;#039;sensorArray[32]&amp;#039; is accessed at index 33, which is out of bounds." verbose="Either the condition &amp;#039;i&amp;lt;32&amp;#039; is redundant or the array &amp;#039;sensorArray[32]&amp;#039; is accessed at index 33, which is out of bounds." cwe="788">
            <location file="post-1605.c" line="44" info="Array index out of bounds"/>
            <location file="post-1605.c" line="42" info="i is incremented&amp;#039;, new value is 33"/>
            <location file="post-1605.c" line="39" info="i is incremented&amp;#039;, new value is 32"/>
            <location file="post-1605.c" line="37" info="Assuming that condition &amp;#039;i&amp;lt;32&amp;#039; is not redundant"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;i&amp;lt;32&amp;#039; is redundant or the array &amp;#039;sensorArray[32]&amp;#039; is accessed at index 34, which is out of bounds." verbose="Either the condition &amp;#039;i&amp;lt;32&amp;#039; is redundant or the array &amp;#039;sensorArray[32]&amp;#039; is accessed at index 34, which is out of bounds." cwe="788">
            <location file="post-1605.c" line="47" info="Array index out of bounds"/>
            <location file="post-1605.c" line="45" info="i is incremented&amp;#039;, new value is 34"/>
            <location file="post-1605.c" line="42" info="i is incremented&amp;#039;, new value is 33"/>
            <location file="post-1605.c" line="39" info="i is incremented&amp;#039;, new value is 32"/>
            <location file="post-1605.c" line="37" info="Assuming that condition &amp;#039;i&amp;lt;32&amp;#039; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;go_to_sleep=1&amp;#039; is always true" verbose="Condition &amp;#039;go_to_sleep=1&amp;#039; is always true" cwe="571">
            <location file="post-16155.c" line="17"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="post-162-4.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-17025.c" line="3"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561">
            <location file="post-17255.c" line="28"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;now&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;now&amp;#039; shadows outer variable" cwe="398">
            <location file="post-17504-3.c" line="18" info="Shadow variable"/>
            <location file="post-17504-3.c" line="12" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;now_&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;now_&amp;#039; shadows outer variable" cwe="398">
            <location file="post-17504-4.c" line="23" info="Shadow variable"/>
            <location file="post-17504-4.c" line="13" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-17614-2.c" line="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-17614-3.c" line="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-17614-4.c" line="21"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;array&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;array&amp;#039; nulled but not freed upon failure" cwe="401">
            <location file="post-18097.c" line="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t3&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t3&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-18116.c" line="19"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="post-1816.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rcT&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rcT&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-18221.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rcN&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rcN&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-18221.c" line="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rcT&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rcT&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-18281.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rcN&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rcN&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-18281.c" line="53"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-18304.c" line="21"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;functionA&amp;#039; argument order different: declaration &amp;#039;errorMsg, &amp;#039; definition &amp;#039;errorCode, errorMsg&amp;#039;" verbose="Function &amp;#039;functionA&amp;#039; argument order different: declaration &amp;#039;errorMsg, &amp;#039; definition &amp;#039;errorCode, errorMsg&amp;#039;" cwe="683">
            <location file="post-18795.c" line="10" info=""/>
            <location file="post-18795.c" line="2" info=""/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;randomnumber&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;randomnumber&amp;#039; shadows outer variable" cwe="398">
            <location file="post-18875.c" line="32" info="Shadow variable"/>
            <location file="post-18875.c" line="6" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pnum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pnum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-19007.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pomask&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pomask&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-19007.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pocode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pocode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-19007.c" line="58"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-19007.c" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-19007.c" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-19007.c" line="117"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-19007.c" line="129"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: a" verbose="Memory leak: a" cwe="401">
            <location file="post-19093.c" line="12"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;readmask&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;readmask&amp;#039; shadows outer variable" cwe="398">
            <location file="post-19109-4.c" line="206" info="Shadow variable"/>
            <location file="post-19109-4.c" line="134" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rcT&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rcT&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-19109.c" line="54"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rcN&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rcN&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-19109.c" line="55"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rVal&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rVal&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-19327.c" line="2"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: godz" verbose="Buffer is accessed out of bounds: godz" cwe="788">
            <location file="post-19457.c" line="7"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;cool=2&amp;#039; is always true" verbose="Condition &amp;#039;cool=2&amp;#039; is always true" cwe="571">
            <location file="post-19541-3.c" line="6"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561">
            <location file="post-19710.c" line="36"/>
        </error>
        <error id="va_end_missing" severity="error" msg="va_list &amp;#039;argv&amp;#039; was opened but not closed by va_end()." verbose="va_list &amp;#039;argv&amp;#039; was opened but not closed by va_end()." cwe="664">
            <location file="post-201-2.c" line="52"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: user_menu_selection" verbose="Uninitialized variable: user_menu_selection" cwe="457">
            <location file="post-20300.c" line="25"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: user_menu_selection" verbose="Uninitialized variable: user_menu_selection" cwe="457">
            <location file="post-20300.c" line="27"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;user_menu_selection&amp;#039; is not assigned a value." verbose="Variable &amp;#039;user_menu_selection&amp;#039; is not assigned a value." cwe="665">
            <location file="post-20300.c" line="23"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;names[16]&amp;#039; accessed at index 16, which is out of bounds." verbose="Array &amp;#039;names[16]&amp;#039; accessed at index 16, which is out of bounds." cwe="788">
            <location file="post-20464.c" line="41"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-20551.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pressureRaw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pressureRaw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-20885.c" line="26"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buf" verbose="Uninitialized variable: buf" cwe="457">
            <location file="post-20912.c" line="7"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buf" verbose="Uninitialized variable: buf" cwe="457">
            <location file="post-20913.c" line="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-21189.c" line="20"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;buttonState1&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;buttonState1&amp;#039; shadows outer variable" cwe="398">
            <location file="post-21231.c" line="34" info="Shadow variable"/>
            <location file="post-21231.c" line="9" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;buttonState2&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;buttonState2&amp;#039; shadows outer variable" cwe="398">
            <location file="post-21231.c" line="35" info="Shadow variable"/>
            <location file="post-21231.c" line="10" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;yellowLedState&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;yellowLedState&amp;#039; shadows outer variable" cwe="398">
            <location file="post-21231.c" line="36" info="Shadow variable"/>
            <location file="post-21231.c" line="13" info="Shadowed declaration"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 34 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="post-21257.c" line="0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: funcPtr" verbose="Null pointer dereference: funcPtr" cwe="476">
            <location file="post-215.c" line="13" info="Null pointer dereference"/>
            <location file="post-215.c" line="12" info="Assignment &amp;#039;funcPtr=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ip&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ip&amp;#039; shadows outer variable" cwe="398">
            <location file="post-21554.c" line="296" info="Shadow variable"/>
            <location file="post-21554.c" line="33" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;blabels&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;blabels&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-21592.c" line="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tempC&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tempC&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-22175.c" line="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;allFF&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;allFF&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-22357-3.c" line="59"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;recv&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;recv&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-22408.c" line="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bundle&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bundle&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-22739.c" line="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-22739.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;now&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;now&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-22739.c" line="146"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: state" verbose="Uninitialized variable: state" cwe="457">
            <location file="post-23279-2.c" line="26"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: state" verbose="Uninitialized variable: state" cwe="457">
            <location file="post-23279.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-23742-2.c" line="6"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-24751-2.c" line="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;currentFrame&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;currentFrame&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-24751-2.c" line="3"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!loaded&amp;#039; is always true" verbose="Condition &amp;#039;!loaded&amp;#039; is always true" cwe="571">
            <location file="post-25180.c" line="41" info="Condition &amp;#039;!loaded&amp;#039; is always true"/>
            <location file="post-25180.c" line="14" info="Assuming that condition &amp;#039;loaded&amp;#039; is not redundant"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;content&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;content&amp;#039; shadows outer variable" cwe="398">
            <location file="post-25272-2.c" line="5" info="Shadow variable"/>
            <location file="post-25272-2.c" line="1" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;phase&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;phase&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-25280.c" line="22"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;timeCode[11]&amp;#039; accessed at index 11, which is out of bounds." verbose="Array &amp;#039;timeCode[11]&amp;#039; accessed at index 11, which is out of bounds." cwe="788">
            <location file="post-25615.c" line="185"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pin_state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pin_state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-25727.c" line="9"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: esid" verbose="Uninitialized variable: esid" cwe="457">
            <location file="post-25785.c" line="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;latestSelectedChannel&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;latestSelectedChannel&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-26439-2.c" line="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-26492.c" line="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;data&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;data&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-26952.c" line="3"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="post-28137.c" line="16"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="post-28138.c" line="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;now&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;now&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-28613.c" line="18"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &amp;#039;loop&amp;#039; shadows outer function" verbose="Local variable &amp;#039;loop&amp;#039; shadows outer function" cwe="398">
            <location file="post-29060.c" line="5" info="Shadow variable"/>
            <location file="post-29060.c" line="16" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;position&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;position&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-29137-2.c" line="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-29140.c" line="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-29644.c" line="9"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;uri&amp;#039; is not used." verbose="Label &amp;#039;uri&amp;#039; is not used." cwe="398">
            <location file="post-30335.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-30354-3.c" line="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-30709-2.c" line="34"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;Addrs[d]&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;Addrs[d]&amp;#039; is of type &amp;#039;const void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1." cwe="467">
            <location file="post-30709-2.c" line="45"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;compteur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;compteur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-31109-2.c" line="65"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;maxVal&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;maxVal&amp;#039; shadows outer variable" cwe="398">
            <location file="post-31109-2.c" line="135" info="Shadow variable"/>
            <location file="post-31109-2.c" line="42" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;clients&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;clients&amp;#039; shadows outer variable" cwe="398">
            <location file="post-31263.c" line="77" info="Shadow variable"/>
            <location file="post-31263.c" line="9" info="Shadowed declaration"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;fibonacci[15]&amp;#039; accessed at index 16, which is out of bounds." verbose="Array &amp;#039;fibonacci[15]&amp;#039; accessed at index 16, which is out of bounds." cwe="788">
            <location file="post-31422.c" line="11"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;fibonacci[15]&amp;#039; accessed at index 15, which is out of bounds." verbose="Array &amp;#039;fibonacci[15]&amp;#039; accessed at index 15, which is out of bounds." cwe="788">
            <location file="post-31422.c" line="11"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;convertedvalue&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;convertedvalue&amp;#039; to itself." cwe="398">
            <location file="post-31506.c" line="14"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;convertedvalue&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;convertedvalue&amp;#039; to itself." cwe="398">
            <location file="post-31506.c" line="20"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: convertedvalue" verbose="Uninitialized variable: convertedvalue" cwe="457">
            <location file="post-31506.c" line="14"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: convertedvalue" verbose="Uninitialized variable: convertedvalue" cwe="457">
            <location file="post-31506.c" line="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-31790.c" line="18"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;axisMatrix[50][3]&amp;#039; accessed at index axisMatrix[50][1], which is out of bounds." verbose="Array &amp;#039;axisMatrix[50][3]&amp;#039; accessed at index axisMatrix[50][1], which is out of bounds." cwe="788">
            <location file="post-31796.c" line="13"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;axisMatrix[50][3]&amp;#039; accessed at index axisMatrix[50][2], which is out of bounds." verbose="Array &amp;#039;axisMatrix[50][3]&amp;#039; accessed at index axisMatrix[50][2], which is out of bounds." cwe="788">
            <location file="post-31796.c" line="14"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;axisMatrix[50][3]&amp;#039; accessed at index axisMatrix[50][3], which is out of bounds." verbose="Array &amp;#039;axisMatrix[50][3]&amp;#039; accessed at index axisMatrix[50][3], which is out of bounds." cwe="788">
            <location file="post-31796.c" line="15"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;axisMatrix[50][3]&amp;#039; accessed at index axisMatrix[*][3], which is out of bounds." verbose="Array &amp;#039;axisMatrix[50][3]&amp;#039; accessed at index axisMatrix[*][3], which is out of bounds." cwe="788">
            <location file="post-31796.c" line="22"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;timeu==1000&amp;#039; is always false" verbose="Condition &amp;#039;timeu==1000&amp;#039; is always false" cwe="570">
            <location file="post-31798.c" line="54" info="Condition &amp;#039;timeu==1000&amp;#039; is always false"/>
            <location file="post-31798.c" line="47" info="Assuming that condition &amp;#039;timeu&amp;lt;=1000&amp;#039; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;input&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;input&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-32272-3.c" line="2"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561">
            <location file="post-32358.c" line="2"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561">
            <location file="post-32358.c" line="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rotaryCount&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rotaryCount&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-32575.c" line="33"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;serialInput&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;serialInput&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-33039.c" line="14"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;serialInput&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;serialInput&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-33039.c" line="16"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always true because &amp;#039;else if&amp;#039; condition is opposite to previous condition at line 110." verbose="Expression is always true because &amp;#039;else if&amp;#039; condition is opposite to previous condition at line 110." cwe="398">
            <location file="post-33317-2.c" line="115" info="else if condition is opposite to first condition"/>
            <location file="post-33317-2.c" line="110" info="first condition"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;shwFg==0&amp;#039; is always false" verbose="Condition &amp;#039;shwFg==0&amp;#039; is always false" cwe="570">
            <location file="post-33584.c" line="143" info="Condition &amp;#039;shwFg==0&amp;#039; is always false"/>
            <location file="post-33584.c" line="139" info="Assignment &amp;#039;shwFg=1&amp;#039;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;resolution&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;resolution&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-33809-2.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ads1262Count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ads1262Count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-33809-2.c" line="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;push_count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;push_count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-33834.c" line="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;led1_OnOff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;led1_OnOff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-34070.c" line="10"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-34514-2.c" line="14"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-34514-2.c" line="15"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-34514-2.c" line="16"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-34514-2.c" line="17"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-35257.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;freeze&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;freeze&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-36005.c" line="2"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457">
            <location file="post-36078.c" line="183"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;idex&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;idex&amp;#039; shadows outer variable" cwe="398">
            <location file="post-36134.c" line="8" info="Shadow variable"/>
            <location file="post-36134.c" line="2" info="Shadowed declaration"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses." cwe="398">
            <location file="post-36480.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-37340-2.c" line="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-37340-2.c" line="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;I&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;I&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-37714.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;Q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;Q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-37714.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;Ar&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;Ar&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-37714.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;R&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;R&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-37714.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;Ac&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;Ac&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-37714.c" line="74"/>
        </error>
        <error id="incrementboolean" severity="style" msg="Incrementing a variable of type &amp;#039;bool&amp;#039; with postfix operator++ is deprecated by the C++ Standard. You should assign it the value &amp;#039;true&amp;#039; instead." verbose="The operand of a postfix increment operator may be of type bool but it is deprecated by C++ Standard (Annex D-1) and the operand is always set to true. You should assign it the value &amp;#039;true&amp;#039; instead." cwe="398">
            <location file="post-37727.c" line="14"/>
        </error>
        <error id="incrementboolean" severity="style" msg="Incrementing a variable of type &amp;#039;bool&amp;#039; with postfix operator++ is deprecated by the C++ Standard. You should assign it the value &amp;#039;true&amp;#039; instead." verbose="The operand of a postfix increment operator may be of type bool but it is deprecated by C++ Standard (Annex D-1) and the operand is always set to true. You should assign it the value &amp;#039;true&amp;#039; instead." cwe="398">
            <location file="post-37727.c" line="19"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;." cwe="783">
            <location file="post-38542-2.c" line="11"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;AcX&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;AcX&amp;#039; shadows outer variable" cwe="398">
            <location file="post-38754.c" line="78" info="Shadow variable"/>
            <location file="post-38754.c" line="3" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;AcY&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;AcY&amp;#039; shadows outer variable" cwe="398">
            <location file="post-38754.c" line="79" info="Shadow variable"/>
            <location file="post-38754.c" line="3" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;AcZ&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;AcZ&amp;#039; shadows outer variable" cwe="398">
            <location file="post-38754.c" line="80" info="Shadow variable"/>
            <location file="post-38754.c" line="3" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;CurrentPotVal&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;CurrentPotVal&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-39514-3.c" line="50"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;command&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;command&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-3954.c" line="24"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;command&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;command&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-3954.c" line="28"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;command&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;command&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-3954.c" line="32"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;command&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;command&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-3954.c" line="36"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;command&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;command&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-3954.c" line="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;inByte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;inByte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-3978.c" line="21"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function atoi() is not used." verbose="Return value of function atoi() is not used." cwe="252">
            <location file="post-39841-2.c" line="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-40174.c" line="7"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;-&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="post-40316.c" line="110"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;TPS&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;TPS&amp;#039; shadows outer variable" cwe="398">
            <location file="post-40316.c" line="203" info="Shadow variable"/>
            <location file="post-40316.c" line="33" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;MAP&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;MAP&amp;#039; shadows outer variable" cwe="398">
            <location file="post-40316.c" line="204" info="Shadow variable"/>
            <location file="post-40316.c" line="20" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;LOAD&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;LOAD&amp;#039; shadows outer variable" cwe="398">
            <location file="post-40316.c" line="205" info="Shadow variable"/>
            <location file="post-40316.c" line="46" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;LOAD&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;LOAD&amp;#039; shadows outer variable" cwe="398">
            <location file="post-40316.c" line="221" info="Shadow variable"/>
            <location file="post-40316.c" line="46" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;RPM&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;RPM&amp;#039; shadows outer variable" cwe="398">
            <location file="post-40316.c" line="222" info="Shadow variable"/>
            <location file="post-40316.c" line="56" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;MSBs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;MSBs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-41863.c" line="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;LSBs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;LSBs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-41863.c" line="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;C&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;C&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-41863.c" line="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;B&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;B&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-41863.c" line="36"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561">
            <location file="post-42974.c" line="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-42974.c" line="97"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-43486.c" line="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sample&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sample&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-43561.c" line="84"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;ihue&amp;gt;255&amp;#039; is always false" verbose="Condition &amp;#039;ihue&amp;gt;255&amp;#039; is always false" cwe="570">
            <location file="post-43565-2.c" line="5" info="Condition &amp;#039;ihue&amp;gt;255&amp;#039; is always false"/>
            <location file="post-43565-2.c" line="4" info="ihue is incremented&amp;#039;, new value is 1"/>
            <location file="post-43565-2.c" line="3" info="Assignment &amp;#039;ihue=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;index&amp;gt;=2000&amp;#039; is redundant or the array &amp;#039;data[1024]&amp;#039; is accessed at index 1999, which is out of bounds." verbose="Either the condition &amp;#039;index&amp;gt;=2000&amp;#039; is redundant or the array &amp;#039;data[1024]&amp;#039; is accessed at index 1999, which is out of bounds." cwe="788">
            <location file="post-43628.c" line="34" info="Array index out of bounds"/>
            <location file="post-43628.c" line="35" info="index is incremented&amp;#039;, new value is 1999"/>
            <location file="post-43628.c" line="36" info="Assuming that condition &amp;#039;index&amp;gt;=2000&amp;#039; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-43628.c" line="22"/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;val&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;val&amp;#039; might be accessed at non-zero index." cwe="758">
            <location file="post-43738.c" line="4" info=""/>
            <location file="post-43738.c" line="2" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;val&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;val&amp;#039; might be accessed at non-zero index." cwe="758">
            <location file="post-43738.c" line="11" info=""/>
            <location file="post-43738.c" line="9" info="Address of variable taken here."/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-43901.c" line="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-43901.c" line="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;currT&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;currT&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-43901.c" line="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;output_0_state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;output_0_state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-43983-2.c" line="15"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &amp;#039;position&amp;#039; is used before limits check." verbose="Defensive programming: The variable &amp;#039;position&amp;#039; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &amp;#039;(a[i] &amp;amp;&amp;amp; i &amp;lt; 10)&amp;#039; to &amp;#039;(i &amp;lt; 10 &amp;amp;&amp;amp; a[i])&amp;#039;. That way the array will not be accessed if the index is out of limits." cwe="398">
            <location file="post-44154.c" line="20"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;foo&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;foo&amp;#039; shadows outer variable" cwe="398">
            <location file="post-44510.c" line="19" info="Shadow variable"/>
            <location file="post-44510.c" line="3" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;foo&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;foo&amp;#039; shadows outer variable" cwe="398">
            <location file="post-44510.c" line="23" info="Shadow variable"/>
            <location file="post-44510.c" line="3" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;foo&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;foo&amp;#039; shadows outer variable" cwe="398">
            <location file="post-44510.c" line="27" info="Shadow variable"/>
            <location file="post-44510.c" line="3" info="Shadowed declaration"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;lednum&amp;lt;=50&amp;#039; is redundant or the array &amp;#039;Leds[50]&amp;#039; is accessed at index 50, which is out of bounds." verbose="Either the condition &amp;#039;lednum&amp;lt;=50&amp;#039; is redundant or the array &amp;#039;Leds[50]&amp;#039; is accessed at index 50, which is out of bounds." inconclusive="true" cwe="788">
            <location file="post-44892.c" line="164" info="Array index out of bounds"/>
            <location file="post-44892.c" line="158" info="Assuming that condition &amp;#039;lednum&amp;lt;=50&amp;#039; is not redundant"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;lednum&amp;lt;=50&amp;#039; is redundant or the array &amp;#039;Leds[50]&amp;#039; is accessed at index 50, which is out of bounds." verbose="Either the condition &amp;#039;lednum&amp;lt;=50&amp;#039; is redundant or the array &amp;#039;Leds[50]&amp;#039; is accessed at index 50, which is out of bounds." inconclusive="true" cwe="788">
            <location file="post-44892.c" line="168" info="Array index out of bounds"/>
            <location file="post-44892.c" line="158" info="Assuming that condition &amp;#039;lednum&amp;lt;=50&amp;#039; is not redundant"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-44892.c" line="30"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The comparison &amp;#039;kMatrixSerpentineLayout == true&amp;#039; is always true because &amp;#039;kMatrixSerpentineLayout&amp;#039; and &amp;#039;true&amp;#039; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="post-45499.c" line="91" info=""/>
            <location file="post-45499.c" line="12" info="&amp;#039;kMatrixSerpentineLayout&amp;#039; is assigned value &amp;#039;true&amp;#039; here."/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-45499.c" line="26"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-45941.c" line="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-45942.c" line="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;values&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;values&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-46017.c" line="13"/>
        </error>
        <error id="sizeofCalculation" severity="warning" msg="Found calculation inside sizeof()." verbose="Found calculation inside sizeof()." cwe="682">
            <location file="post-46017.c" line="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-46270.c" line="24"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The comparison &amp;#039;x != 0x80&amp;#039; is always false." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="post-46294.c" line="7" info=""/>
            <location file="post-46294.c" line="6" info="&amp;#039;x&amp;#039; is assigned value &amp;#039;0x80&amp;#039; here."/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &amp;#039;if&amp;#039; condition is always true." verbose="Identical inner &amp;#039;if&amp;#039; condition is always true (outer condition is &amp;#039;voltsZero==5&amp;#039; and inner condition is &amp;#039;voltsZero==5&amp;#039;)." cwe="398">
            <location file="post-46361.c" line="28" info="identical inner condition: voltsZero==5"/>
            <location file="post-46361.c" line="25" info="outer condition: voltsZero==5"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &amp;#039;if&amp;#039; condition is always true." verbose="Identical inner &amp;#039;if&amp;#039; condition is always true (outer condition is &amp;#039;voltsOne==5&amp;#039; and inner condition is &amp;#039;voltsOne==5&amp;#039;)." cwe="398">
            <location file="post-46361.c" line="43" info="identical inner condition: voltsOne==5"/>
            <location file="post-46361.c" line="40" info="outer condition: voltsOne==5"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &amp;#039;if&amp;#039; condition is always true." verbose="Identical inner &amp;#039;if&amp;#039; condition is always true (outer condition is &amp;#039;voltsTwo==5&amp;#039; and inner condition is &amp;#039;voltsTwo==5&amp;#039;)." cwe="398">
            <location file="post-46361.c" line="56" info="identical inner condition: voltsTwo==5"/>
            <location file="post-46361.c" line="53" info="outer condition: voltsTwo==5"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &amp;#039;if&amp;#039; condition is always true." verbose="Identical inner &amp;#039;if&amp;#039; condition is always true (outer condition is &amp;#039;voltsThree==5&amp;#039; and inner condition is &amp;#039;voltsThree==5&amp;#039;)." cwe="398">
            <location file="post-46361.c" line="70" info="identical inner condition: voltsThree==5"/>
            <location file="post-46361.c" line="67" info="outer condition: voltsThree==5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;arrow_x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;arrow_x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-47381.c" line="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;arrow_y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;arrow_y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-47381.c" line="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-47455-2.c" line="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;length&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;length&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-47455-2.c" line="9"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457">
            <location file="post-47503.c" line="4"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 3) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." verbose="%X in format string (no. 3) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." cwe="686">
            <location file="post-480.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;counter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;counter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-480.c" line="20"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;&amp;quot;millis(): %ld\tcounter: %ld (%02X)\n&amp;quot;,millis(),counter,counter++&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;&amp;quot;millis(): %ld\tcounter: %ld (%02X)\n&amp;quot;,millis(),counter,counter++&amp;#039; depends on order of evaluation of side effects" cwe="768">
            <location file="post-480.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;counter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;counter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-483.c" line="10"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buffer" verbose="Uninitialized variable: buffer" cwe="457">
            <location file="post-48446.c" line="36"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &amp;#039;if (msg!=&amp;quot;&amp;quot;) msg=&amp;quot;&amp;quot;&amp;#039; is logically equivalent to &amp;#039;msg=&amp;quot;&amp;quot;&amp;#039;." verbose="The statement &amp;#039;if (msg!=&amp;quot;&amp;quot;) msg=&amp;quot;&amp;quot;&amp;#039; is logically equivalent to &amp;#039;msg=&amp;quot;&amp;quot;&amp;#039;." cwe="398">
            <location file="post-48493.c" line="40" info="Condition &amp;#039;msg!=&amp;quot;&amp;quot;&amp;#039; is redundant"/>
            <location file="post-48493.c" line="40" info="Assignment &amp;#039;msg=&amp;quot;&amp;quot;&amp;#039;"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;msg&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;msg&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-48493.c" line="31"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;msg&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;msg&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-48493.c" line="35"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;msg&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;msg&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-48493.c" line="40"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398">
            <location file="post-48544.c" line="5" info="Second condition"/>
            <location file="post-48544.c" line="2" info="First condition"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;sensorState==1&amp;#039; is always true" verbose="Condition &amp;#039;sensorState==1&amp;#039; is always true" cwe="571">
            <location file="post-48548.c" line="10" info="Condition &amp;#039;sensorState==1&amp;#039; is always true"/>
            <location file="post-48548.c" line="8" info="Assuming that condition &amp;#039;sensorState==1&amp;#039; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-48654.c" line="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-48654.c" line="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;port&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;port&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-48654.c" line="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-48654.c" line="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-48654.c" line="103"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;port&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;port&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-48654.c" line="105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;readBit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;readBit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-48654.c" line="109"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buffer" verbose="Uninitialized variable: buffer" cwe="457">
            <location file="post-48694.c" line="20"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;p&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;p&amp;#039; nulled but not freed upon failure" cwe="401">
            <location file="post-48771.c" line="11"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-48990-2.c" line="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;got_a_digit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;got_a_digit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-49155.c" line="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-49155.c" line="6"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398">
            <location file="post-49261.c" line="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;counter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;counter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-49293.c" line="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-49302.c" line="33"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;gps&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;gps&amp;#039; shadows outer variable" cwe="398">
            <location file="post-49319.c" line="20" info="Shadow variable"/>
            <location file="post-49319.c" line="4" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;gsm&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;gsm&amp;#039; shadows outer variable" cwe="398">
            <location file="post-49319.c" line="30" info="Shadow variable"/>
            <location file="post-49319.c" line="3" info="Shadowed declaration"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses." verbose="Suspicious condition. Comparison operators have higher precedence than bitwise operators. Please clarify the condition with parentheses." cwe="398">
            <location file="post-49320.c" line="7"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-49320.c" line="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-49691.c" line="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-49691.c" line="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-50135.c" line="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-50135.c" line="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pressedbutton&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pressedbutton&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-50135.c" line="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sample&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sample&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-50682-2.c" line="36"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;input[12]&amp;#039; accessed at index 12, which is out of bounds." verbose="Array &amp;#039;input[12]&amp;#039; accessed at index 12, which is out of bounds." cwe="788">
            <location file="post-51810.c" line="135"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;data&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;data&amp;#039; shadows outer variable" cwe="398">
            <location file="post-51810.c" line="60" info="Shadow variable"/>
            <location file="post-51810.c" line="9" info="Shadowed declaration"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: data" verbose="Uninitialized variable: data" cwe="457">
            <location file="post-51810.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-51936.c" line="28"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;content.substring(1)&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;content.substring(1)&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-52070.c" line="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-52241-2.c" line="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-52241-2.c" line="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;escaped&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;escaped&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-52241-2.c" line="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;escaped&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;escaped&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-52241.c" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;character&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;character&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-52585-2.c" line="22"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;content&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;content&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-52585-2.c" line="29"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-52689.c" line="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sentence_count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sentence_count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-52925.c" line="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;receive&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;receive&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-54093-2.c" line="11"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;foo[10]&amp;#039; accessed at index 10, which is out of bounds." verbose="Array &amp;#039;foo[10]&amp;#039; accessed at index 10, which is out of bounds." cwe="788">
            <location file="post-54686.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pwm_is_on&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pwm_is_on&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-55045.c" line="11"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;dutycycle_time&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;dutycycle_time&amp;#039; shadows outer variable" cwe="398">
            <location file="post-55265.c" line="41" info="Shadow variable"/>
            <location file="post-55265.c" line="8" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;initial_rpm&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;initial_rpm&amp;#039; shadows outer variable" cwe="398">
            <location file="post-55265.c" line="53" info="Shadow variable"/>
            <location file="post-55265.c" line="7" info="Shadowed declaration"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: buff" verbose="Buffer is accessed out of bounds: buff" cwe="788">
            <location file="post-55266.c" line="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;toggle&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;toggle&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-55516.c" line="90"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-55765.c" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-55894.c" line="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-55894.c" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rpos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rpos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-55894.c" line="19"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-55910.c" line="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;error_count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;error_count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-56049.c" line="12"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ultrasonic&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ultrasonic&amp;#039; shadows outer variable" cwe="398">
            <location file="post-56667.c" line="14" info="Shadow variable"/>
            <location file="post-56667.c" line="4" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;buttonState&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;buttonState&amp;#039; shadows outer variable" cwe="398">
            <location file="post-56734.c" line="21" info="Shadow variable"/>
            <location file="post-56734.c" line="9" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buttonState&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buttonState&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-56805.c" line="3"/>
        </error>
        <error id="signConversion" severity="warning" msg="Expression &amp;#039;-2&amp;#039; has a negative value. That is converted to an unsigned value and used in an unsigned calculation." verbose="Expression &amp;#039;-2&amp;#039; has a negative value. That is converted to an unsigned value and used in an unsigned calculation." cwe="195">
            <location file="post-57562.c" line="10"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;voltage[2]&amp;#039; accessed at index 16, which is out of bounds." verbose="Array &amp;#039;voltage[2]&amp;#039; accessed at index 16, which is out of bounds." cwe="788">
            <location file="post-57798.c" line="69"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &amp;#039;channel&amp;#039; shadows outer argument" verbose="Local variable &amp;#039;channel&amp;#039; shadows outer argument" cwe="398">
            <location file="post-57798.c" line="111" info="Shadow variable"/>
            <location file="post-57798.c" line="80" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;value&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;value&amp;#039; shadows outer variable" cwe="398">
            <location file="post-57798.c" line="118" info="Shadow variable"/>
            <location file="post-57798.c" line="81" info="Shadowed declaration"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ts" verbose="Uninitialized variable: ts" cwe="457">
            <location file="post-57867-2.c" line="5"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;l&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;l&amp;#039; shadows outer variable" cwe="398">
            <location file="post-58256.c" line="7" info="Shadow variable"/>
            <location file="post-58256.c" line="5" info="Shadowed declaration"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561">
            <location file="post-58283.c" line="4"/>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369">
            <location file="post-58314.c" line="9" info="Division by zero"/>
            <location file="post-58314.c" line="6" info="Assignment &amp;#039;x=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;ventclosed&amp;#039; is always true" verbose="Condition &amp;#039;ventclosed&amp;#039; is always true" cwe="571">
            <location file="post-60282.c" line="304" info="Condition &amp;#039;ventclosed&amp;#039; is always true"/>
            <location file="post-60282.c" line="302" info="Assignment &amp;#039;ventclosed=80&amp;#039;, assigned value is 80"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;displayMode=++displayMode%8&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;displayMode=++displayMode%8&amp;#039; depends on order of evaluation of side effects" cwe="768">
            <location file="post-60282.c" line="351"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;Hcontrol=++Hcontrol&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;Hcontrol=++Hcontrol&amp;#039; depends on order of evaluation of side effects" cwe="768">
            <location file="post-60282.c" line="391"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;." cwe="783">
            <location file="post-60282.c" line="377"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;chr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;chr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-60631.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pImg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pImg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-60841.c" line="183"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: hexCar" verbose="Buffer is accessed out of bounds: hexCar" cwe="788">
            <location file="post-60865.c" line="10"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;len&amp;lt;500&amp;#039; is redundant or the array &amp;#039;data[100]&amp;#039; is accessed at index 499, which is out of bounds." verbose="Either the condition &amp;#039;len&amp;lt;500&amp;#039; is redundant or the array &amp;#039;data[100]&amp;#039; is accessed at index 499, which is out of bounds." cwe="788">
            <location file="post-60892.c" line="51" info="Array index out of bounds"/>
            <location file="post-60892.c" line="48" info="Assuming that condition &amp;#039;len&amp;lt;500&amp;#039; is not redundant"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;len&amp;lt;500&amp;#039; is redundant or the array &amp;#039;data[100]&amp;#039; is accessed at index 500, which is out of bounds." verbose="Either the condition &amp;#039;len&amp;lt;500&amp;#039; is redundant or the array &amp;#039;data[100]&amp;#039; is accessed at index 500, which is out of bounds." cwe="788">
            <location file="post-60892.c" line="54" info="Array index out of bounds"/>
            <location file="post-60892.c" line="48" info="Assuming that condition &amp;#039;len&amp;lt;500&amp;#039; is not redundant"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;len&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;len&amp;#039; shadows outer variable" cwe="398">
            <location file="post-61130-2.c" line="15" info="Shadow variable"/>
            <location file="post-61130-2.c" line="8" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;float_chars&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;float_chars&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-61130-4.c" line="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-61141.c" line="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rpos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rpos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-61141.c" line="41"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;myServoFlag==1&amp;#039; is always true" verbose="Condition &amp;#039;myServoFlag==1&amp;#039; is always true" cwe="571">
            <location file="post-61306.c" line="165" info="Condition &amp;#039;myServoFlag==1&amp;#039; is always true"/>
            <location file="post-61306.c" line="162" info="Assignment &amp;#039;myServoFlag=1&amp;#039;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;myServoFlag==1&amp;#039; is always true" verbose="Condition &amp;#039;myServoFlag==1&amp;#039; is always true" cwe="571">
            <location file="post-61306.c" line="238" info="Condition &amp;#039;myServoFlag==1&amp;#039; is always true"/>
            <location file="post-61306.c" line="235" info="Assignment &amp;#039;myServoFlag=1&amp;#039;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;myServoFlag==1&amp;#039; is always true" verbose="Condition &amp;#039;myServoFlag==1&amp;#039; is always true" cwe="571">
            <location file="post-61306.c" line="377" info="Condition &amp;#039;myServoFlag==1&amp;#039; is always true"/>
            <location file="post-61306.c" line="374" info="Assignment &amp;#039;myServoFlag=1&amp;#039;, assigned value is 1"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable" cwe="398">
            <location file="post-61477.c" line="18" info="Shadow variable"/>
            <location file="post-61477.c" line="14" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-61602.c" line="14"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &amp;#039;if&amp;#039; condition leads to a dead code block." verbose="Opposite inner &amp;#039;if&amp;#039; condition leads to a dead code block (outer condition is &amp;#039;s1==0&amp;#039; and inner condition is &amp;#039;s1==1&amp;#039;)." cwe="398">
            <location file="post-61804.c" line="21" info="opposite inner condition: s1==1"/>
            <location file="post-61804.c" line="20" info="outer condition: s1==0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;g&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;g&amp;#039; shadows outer variable" cwe="398">
            <location file="post-61804.c" line="49" info="Shadow variable"/>
            <location file="post-61804.c" line="9" info="Shadowed declaration"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398">
            <location file="post-62238.c" line="12"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;buf&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;buf&amp;#039; shadows outer variable" cwe="398">
            <location file="post-62338.c" line="15" info="Shadow variable"/>
            <location file="post-62338.c" line="1" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-62458.c" line="5"/>
        </error>
        <error id="sizeofCalculation" severity="warning" msg="Found calculation inside sizeof()." verbose="Found calculation inside sizeof()." cwe="682">
            <location file="post-63116.c" line="12"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;pressure_bar=1600&amp;#039; is always true" verbose="Condition &amp;#039;pressure_bar=1600&amp;#039; is always true" cwe="571">
            <location file="post-63357-3.c" line="30"/>
        </error>
        <error id="compareBoolExpressionWithInt" severity="warning" msg="Comparison of a boolean expression with an integer other than 0 or 1." verbose="Comparison of a boolean expression with an integer other than 0 or 1." cwe="398">
            <location file="post-63466.c" line="7"/>
        </error>
        <error id="compareBoolExpressionWithInt" severity="warning" msg="Comparison of a boolean expression with an integer other than 0 or 1." verbose="Comparison of a boolean expression with an integer other than 0 or 1." cwe="398">
            <location file="post-63466.c" line="8"/>
        </error>
        <error id="compareBoolExpressionWithInt" severity="warning" msg="Comparison of a boolean expression with an integer other than 0 or 1." verbose="Comparison of a boolean expression with an integer other than 0 or 1." cwe="398">
            <location file="post-63466.c" line="11"/>
        </error>
        <error id="compareBoolExpressionWithInt" severity="warning" msg="Comparison of a boolean expression with an integer other than 0 or 1." verbose="Comparison of a boolean expression with an integer other than 0 or 1." cwe="398">
            <location file="post-63466.c" line="12"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &amp;#039;period&amp;#039; is less than zero." verbose="The unsigned expression &amp;#039;period&amp;#039; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="post-6448.c" line="55"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;json1&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;json1&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-64833.c" line="22"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;count&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;count&amp;#039; to itself." cwe="398">
            <location file="post-64932.c" line="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;inputBuffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;inputBuffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-65462.c" line="5"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;index&amp;gt;=number_of_readings&amp;#039; is redundant or the array &amp;#039;current_reading[200]&amp;#039; is accessed at index 200, which is out of bounds." verbose="Either the condition &amp;#039;index&amp;gt;=number_of_readings&amp;#039; is redundant or the array &amp;#039;current_reading[200]&amp;#039; is accessed at index 200, which is out of bounds." cwe="788">
            <location file="post-65502.c" line="53" info="Array index out of bounds"/>
            <location file="post-65502.c" line="55" info="Assignment to &amp;#039;index=index+1&amp;#039;"/>
            <location file="post-65502.c" line="57" info="Assuming that condition &amp;#039;index&amp;gt;=number_of_readings&amp;#039; is not redundant"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;index&amp;gt;=number_of_readings&amp;#039; is redundant or the array &amp;#039;current_reading[200]&amp;#039; is accessed at index 200, which is out of bounds." verbose="Either the condition &amp;#039;index&amp;gt;=number_of_readings&amp;#039; is redundant or the array &amp;#039;current_reading[200]&amp;#039; is accessed at index 200, which is out of bounds." cwe="788">
            <location file="post-65502.c" line="54" info="Array index out of bounds"/>
            <location file="post-65502.c" line="55" info="Assignment to &amp;#039;index=index+1&amp;#039;"/>
            <location file="post-65502.c" line="57" info="Assuming that condition &amp;#039;index&amp;gt;=number_of_readings&amp;#039; is not redundant"/>
        </error>
        <error id="incrementboolean" severity="style" msg="Incrementing a variable of type &amp;#039;bool&amp;#039; with postfix operator++ is deprecated by the C++ Standard. You should assign it the value &amp;#039;true&amp;#039; instead." verbose="The operand of a postfix increment operator may be of type bool but it is deprecated by C++ Standard (Annex D-1) and the operand is always set to true. You should assign it the value &amp;#039;true&amp;#039; instead." cwe="398">
            <location file="post-65794.c" line="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;chr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;chr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-65816.c" line="117"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-65816.c" line="117"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fnd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fnd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-65816.c" line="117"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fixedHeadingDegrees" verbose="Uninitialized variable: fixedHeadingDegrees" cwe="457">
            <location file="post-65929.c" line="92"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &amp;#039;distance &amp;lt;= 0&amp;#039;, the comparison &amp;#039;distance &amp;lt;= 25&amp;#039; is always true." verbose="Redundant condition: If &amp;#039;distance &amp;lt;= 0&amp;#039;, the comparison &amp;#039;distance &amp;lt;= 25&amp;#039; is always true." cwe="398">
            <location file="post-65960-2.c" line="37"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &amp;#039;distance &amp;lt;= 0&amp;#039;, the comparison &amp;#039;distance &amp;lt;= 25&amp;#039; is always true." verbose="Redundant condition: If &amp;#039;distance &amp;lt;= 0&amp;#039;, the comparison &amp;#039;distance &amp;lt;= 25&amp;#039; is always true." cwe="398">
            <location file="post-65960.c" line="37"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398">
            <location file="post-66106.c" line="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-66196.c" line="21"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;&amp;amp;&amp;amp;&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="post-6662.c" line="59"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;uID&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;uID&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-6662.c" line="65"/>
        </error>
        <error id="unknownEvaluationOrder" severity="error" msg="Expression &amp;#039;++data,data*data&amp;#039; depends on order of evaluation of side effects" verbose="Expression &amp;#039;++data,data*data&amp;#039; depends on order of evaluation of side effects" cwe="768">
            <location file="post-6706.c" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;result&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;result&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-67155.c" line="6"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable" cwe="398">
            <location file="post-67155.c" line="12" info="Shadow variable"/>
            <location file="post-67155.c" line="4" info="Shadowed declaration"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="portability" msg="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" verbose="Shifting signed 32-bit value by 31 bits is implementation-defined behaviour" cwe="758">
            <location file="post-6725.c" line="5"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &amp;#039;1L&amp;lt;&amp;lt;31&amp;#039;." verbose="Signed integer overflow for expression &amp;#039;1L&amp;lt;&amp;lt;31&amp;#039;." cwe="190">
            <location file="post-6725.c" line="5"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;timeMillis&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;timeMillis&amp;#039; shadows outer variable" cwe="398">
            <location file="post-67493.c" line="45" info="Shadow variable"/>
            <location file="post-67493.c" line="16" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;inChar&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;inChar&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-68437.c" line="6"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-68471.c" line="50"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;temp&amp;gt;20&amp;#039; is always true" verbose="Condition &amp;#039;temp&amp;gt;20&amp;#039; is always true" cwe="571">
            <location file="post-68873.c" line="14" info="Condition &amp;#039;temp&amp;gt;20&amp;#039; is always true"/>
            <location file="post-68873.c" line="7" info="Assuming that condition &amp;#039;temp&amp;lt;=20&amp;#039; is not redundant"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;public&amp;#039; is not used." verbose="Label &amp;#039;public&amp;#039; is not used." cwe="398">
            <location file="post-69026.c" line="3"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;private&amp;#039; is not used." verbose="Label &amp;#039;private&amp;#039; is not used." cwe="398">
            <location file="post-69026.c" line="16"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;res&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;res&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-69577-2.c" line="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-69644.c" line="6"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable" cwe="398">
            <location file="post-69644.c" line="7" info="Shadow variable"/>
            <location file="post-69644.c" line="6" info="Shadowed declaration"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457">
            <location file="post-69644.c" line="13"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is not assigned a value." verbose="Variable &amp;#039;i&amp;#039; is not assigned a value." cwe="665">
            <location file="post-69644.c" line="6"/>
        </error>
        <error id="compareBoolExpressionWithInt" severity="warning" msg="Comparison of a boolean expression with an integer other than 0 or 1." verbose="Comparison of a boolean expression with an integer other than 0 or 1." cwe="398">
            <location file="post-69663.c" line="49"/>
        </error>
        <error id="memsetZeroBytes" severity="warning" msg="memset() called to fill 0 bytes." verbose="memset() called to fill 0 bytes. The second and third arguments might be inverted. The function memset ( void * ptr, int value, size_t num ) sets the first num bytes of the block of memory pointed by ptr to the specified value." cwe="687">
            <location file="post-69785.c" line="4"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;num_array[11][7]&amp;#039; accessed at index num_array[11][*], which is out of bounds." verbose="Array &amp;#039;num_array[11][7]&amp;#039; accessed at index num_array[11][*], which is out of bounds." cwe="788">
            <location file="post-70083.c" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cap&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cap&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-70949.c" line="85"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;startTime=0&amp;#039; is always false" verbose="Condition &amp;#039;startTime=0&amp;#039; is always false" cwe="570">
            <location file="post-70967.c" line="34"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;servo[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;servo[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788">
            <location file="post-70970.c" line="31"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;startTime=0&amp;#039; is always false" verbose="Condition &amp;#039;startTime=0&amp;#039; is always false" cwe="570">
            <location file="post-70985.c" line="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;Vave&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;Vave&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-70985.c" line="33"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;potVal&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;potVal&amp;#039; shadows outer variable" cwe="398">
            <location file="post-71141.c" line="39" info="Shadow variable"/>
            <location file="post-71141.c" line="14" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;x&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;x&amp;#039; shadows outer variable" cwe="398">
            <location file="post-71369-2.c" line="129" info="Shadow variable"/>
            <location file="post-71369-2.c" line="106" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;x&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;x&amp;#039; shadows outer variable" cwe="398">
            <location file="post-71369-2.c" line="155" info="Shadow variable"/>
            <location file="post-71369-2.c" line="106" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;x&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;x&amp;#039; shadows outer variable" cwe="398">
            <location file="post-71369-2.c" line="182" info="Shadow variable"/>
            <location file="post-71369-2.c" line="106" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;x&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;x&amp;#039; shadows outer variable" cwe="398">
            <location file="post-71369.c" line="123" info="Shadow variable"/>
            <location file="post-71369.c" line="101" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;x&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;x&amp;#039; shadows outer variable" cwe="398">
            <location file="post-71369.c" line="145" info="Shadow variable"/>
            <location file="post-71369.c" line="101" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;x&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;x&amp;#039; shadows outer variable" cwe="398">
            <location file="post-71369.c" line="168" info="Shadow variable"/>
            <location file="post-71369.c" line="101" info="Shadowed declaration"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;content.substring(1)&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;content.substring(1)&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-71425.c" line="56"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;fv&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;fv&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-71522.c" line="56"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;response_Status&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;response_Status&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-71522.c" line="138"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;ADDO&amp;#039; is always true" verbose="Condition &amp;#039;ADDO&amp;#039; is always true" cwe="571">
            <location file="post-71618.c" line="9" info="Condition &amp;#039;ADDO&amp;#039; is always true"/>
            <location file="post-71618.c" line="6" info="Assignment &amp;#039;ADDO=1&amp;#039;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;ADDO&amp;#039; is always true" verbose="Condition &amp;#039;ADDO&amp;#039; is always true" cwe="571">
            <location file="post-71618.c" line="14" info="Condition &amp;#039;ADDO&amp;#039; is always true"/>
            <location file="post-71618.c" line="6" info="Assignment &amp;#039;ADDO=1&amp;#039;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;value&amp;lt;=500&amp;#039; is always true" verbose="Condition &amp;#039;value&amp;lt;=500&amp;#039; is always true" cwe="571">
            <location file="post-71995.c" line="19" info="Condition &amp;#039;value&amp;lt;=500&amp;#039; is always true"/>
            <location file="post-71995.c" line="13" info="Assuming that condition &amp;#039;value&amp;gt;500&amp;#039; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ultrasoundValue&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ultrasoundValue&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-720.c" line="15"/>
        </error>
        <error id="getsCalled" severity="warning" msg="Obsolete function &amp;#039;gets&amp;#039; called. It is recommended to use &amp;#039;fgets&amp;#039; or &amp;#039;gets_s&amp;#039; instead." verbose="The obsolete function &amp;#039;gets&amp;#039; is called. With &amp;#039;gets&amp;#039; you&amp;#039;ll get a buffer overrun if the input data exceeds the size of the buffer. It is recommended to use the functions &amp;#039;fgets&amp;#039; or &amp;#039;gets_s&amp;#039; instead." cwe="477">
            <location file="post-72078-2.c" line="9"/>
        </error>
        <error id="getsCalled" severity="warning" msg="Obsolete function &amp;#039;gets&amp;#039; called. It is recommended to use &amp;#039;fgets&amp;#039; or &amp;#039;gets_s&amp;#039; instead." verbose="The obsolete function &amp;#039;gets&amp;#039; is called. With &amp;#039;gets&amp;#039; you&amp;#039;ll get a buffer overrun if the input data exceeds the size of the buffer. It is recommended to use the functions &amp;#039;fgets&amp;#039; or &amp;#039;gets_s&amp;#039; instead." cwe="477">
            <location file="post-72078-2.c" line="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-72696.c" line="155"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str" verbose="Uninitialized variable: str" cwe="457">
            <location file="post-72696.c" line="163"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-72757.c" line="14"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;cur_mem&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;cur_mem&amp;#039; shadows outer variable" cwe="398">
            <location file="post-73263.c" line="78" info="Shadow variable"/>
            <location file="post-73263.c" line="21" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-74704.c" line="59"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;new_data&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;new_data&amp;#039; shadows outer variable" cwe="398">
            <location file="post-74704.c" line="61" info="Shadow variable"/>
            <location file="post-74704.c" line="13" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-74718.c" line="60"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;new_data&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;new_data&amp;#039; shadows outer variable" cwe="398">
            <location file="post-74718.c" line="62" info="Shadow variable"/>
            <location file="post-74718.c" line="12" info="Shadowed declaration"/>
        </error>
        <error id="danglingLifetime" severity="error" msg="Non-local variable &amp;#039;stack_start&amp;#039; will use pointer to local variable &amp;#039;stack&amp;#039;." verbose="Non-local variable &amp;#039;stack_start&amp;#039; will use pointer to local variable &amp;#039;stack&amp;#039;." cwe="562">
            <location file="post-74785.c" line="5" info=""/>
            <location file="post-74785.c" line="4" info="Variable created here."/>
            <location file="post-74785.c" line="5" info="Address of variable taken here."/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;openClose&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;openClose&amp;#039; shadows outer variable" cwe="398">
            <location file="post-75014.c" line="13" info="Shadow variable"/>
            <location file="post-75014.c" line="5" info="Shadowed declaration"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: avrdata" verbose="Uninitialized variable: avrdata" cwe="457">
            <location file="post-75259.c" line="11"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-75312.c" line="48"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-75312.c" line="49"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-75312.c" line="51"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-75312.c" line="52"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-75312.c" line="54"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;s&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-75312.c" line="55"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &amp;#039;startIndex&amp;#039; is less than zero." verbose="The unsigned expression &amp;#039;startIndex&amp;#039; will never be negative so it is either pointless or an error to check if it is." cwe="570">
            <location file="post-75454.c" line="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;startMarker&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;startMarker&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-75610-6.c" line="56"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;endMarker&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;endMarker&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-75610-6.c" line="57"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: PERIOD_DESIRED_US" verbose="Uninitialized variable: PERIOD_DESIRED_US" cwe="457">
            <location file="post-75937.c" line="147"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;btnPressed&amp;#039; is always true" verbose="Condition &amp;#039;btnPressed&amp;#039; is always true" cwe="571">
            <location file="post-76182.c" line="37" info="Condition &amp;#039;btnPressed&amp;#039; is always true"/>
            <location file="post-76182.c" line="34" info="Assignment &amp;#039;btnPressed=1&amp;#039;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-76182.c" line="35"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;btnPressed&amp;#039; is always true" verbose="Condition &amp;#039;btnPressed&amp;#039; is always true" cwe="571">
            <location file="post-76183.c" line="11" info="Condition &amp;#039;btnPressed&amp;#039; is always true"/>
            <location file="post-76183.c" line="5" info="Assignment &amp;#039;btnPressed=1&amp;#039;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-76183.c" line="6"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;evt&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;evt&amp;#039; shadows outer variable" cwe="398">
            <location file="post-76241.c" line="39" info="Shadow variable"/>
            <location file="post-76241.c" line="170" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-76256.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-76256.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lim_j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lim_j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-76256.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lim_i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lim_i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-76256.c" line="13"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-76380.c" line="33"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always true because &amp;#039;else if&amp;#039; condition is opposite to previous condition at line 179." verbose="Expression is always true because &amp;#039;else if&amp;#039; condition is opposite to previous condition at line 179." cwe="398">
            <location file="post-77181.c" line="183" info="else if condition is opposite to first condition"/>
            <location file="post-77181.c" line="179" info="first condition"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;data&amp;#039; is always true" verbose="Condition &amp;#039;data&amp;#039; is always true" cwe="571">
            <location file="post-77351.c" line="56" info="Condition &amp;#039;data&amp;#039; is always true"/>
            <location file="post-77351.c" line="55" info="Assuming that condition &amp;#039;data=radio.get_response_packet(1500,5000)&amp;#039; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;data&amp;#039; is always true" verbose="Condition &amp;#039;data&amp;#039; is always true" cwe="571">
            <location file="post-77364.c" line="4" info="Condition &amp;#039;data&amp;#039; is always true"/>
            <location file="post-77364.c" line="3" info="Assuming that condition &amp;#039;data=radio.get_response_packet(PACKET_MTU,5000)&amp;#039; is not redundant"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-77525.c" line="64"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;duration&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;duration&amp;#039; shadows outer variable" cwe="398">
            <location file="post-77629.c" line="10" info="Shadow variable"/>
            <location file="post-77629.c" line="2" info="Shadowed declaration"/>
        </error>
        <error id="comparePointers" severity="error" msg="Comparing pointers that point to different objects" verbose="Comparing pointers that point to different objects" cwe="570">
            <location file="post-777.c" line="39" info=""/>
            <location file="post-777.c" line="39" info="Address of variable taken here."/>
            <location file="post-777.c" line="3" info="Variable declared here."/>
            <location file="post-777.c" line="36" info="Address of variable taken here."/>
            <location file="post-777.c" line="2" info="Variable declared here."/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;ledPins[10]&amp;#039; accessed at index 10, which is out of bounds." verbose="Array &amp;#039;ledPins[10]&amp;#039; accessed at index 10, which is out of bounds." cwe="788">
            <location file="post-77972.c" line="23" info="Array index out of bounds"/>
            <location file="post-77972.c" line="20" info="Assignment &amp;#039;i=10&amp;#039;, assigned value is 10"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dac_value" verbose="Uninitialized variable: dac_value" cwe="457">
            <location file="post-78070-2.c" line="24"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &amp;#039;else if&amp;#039; condition matches previous condition at line 17." verbose="Expression is always false because &amp;#039;else if&amp;#039; condition matches previous condition at line 17." cwe="398">
            <location file="post-78269.c" line="19"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-78373.c" line="20"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-78395.c" line="38"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-78395.c" line="40"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-78395.c" line="42"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-78395.c" line="44"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-78395.c" line="46"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;voice&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-78395.c" line="48"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;thispin&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;thispin&amp;#039; shadows outer variable" cwe="398">
            <location file="post-78405.c" line="6" info="Shadow variable"/>
            <location file="post-78405.c" line="2" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;thispin&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;thispin&amp;#039; shadows outer variable" cwe="398">
            <location file="post-78405.c" line="12" info="Shadow variable"/>
            <location file="post-78405.c" line="2" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;thispin&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;thispin&amp;#039; shadows outer variable" cwe="398">
            <location file="post-78405.c" line="18" info="Shadow variable"/>
            <location file="post-78405.c" line="2" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;array&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;array&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-78647.c" line="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-78647.c" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sensor&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sensor&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-78983.c" line="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;led_state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;led_state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-79160.c" line="7"/>
        </error>
        <error id="constStatement" severity="warning" msg="Unused variable value &amp;#039;thisReading&amp;#039;" verbose="Unused variable value &amp;#039;thisReading&amp;#039;" cwe="398">
            <location file="post-79317.c" line="32"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s_num" verbose="Uninitialized variable: s_num" cwe="457">
            <location file="post-79570-2.c" line="33"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;s_num&amp;#039; is not assigned a value." verbose="Variable &amp;#039;s_num&amp;#039; is not assigned a value." cwe="665">
            <location file="post-79570-2.c" line="31"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s_num" verbose="Uninitialized variable: s_num" cwe="457">
            <location file="post-79570.c" line="15"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: state" verbose="Uninitialized variable: state" cwe="457">
            <location file="post-79740-2.c" line="19"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: servo" verbose="Uninitialized variable: servo" cwe="457">
            <location file="post-79740-2.c" line="19"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: state" verbose="Uninitialized variable: state" cwe="457">
            <location file="post-79740-2.c" line="24" info=""/>
            <location file="post-79740-2.c" line="19" info="Calling function &amp;#039;runServoLight&amp;#039;, 4th argument &amp;#039;state&amp;#039; value is &amp;lt;Uninit&amp;gt;"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &amp;#039;log&amp;#039; is not used." verbose="Label &amp;#039;log&amp;#039; is not used." cwe="398">
            <location file="post-79894.c" line="123"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-80158-2.c" line="28"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: a" verbose="Uninitialized variable: a" cwe="457">
            <location file="post-80228-2.c" line="7"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;a&amp;#039; is not assigned a value." verbose="Variable &amp;#039;a&amp;#039; is not assigned a value." cwe="665">
            <location file="post-80228-2.c" line="5"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." cwe="686">
            <location file="post-80289-4.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;deciSeconds&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;deciSeconds&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-8036.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xAcc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xAcc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-80451.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;yAcc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;yAcc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-80451.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;zAcc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;zAcc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-80451.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xGyro&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xGyro&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-80451.c" line="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;yGyro&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;yGyro&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-80451.c" line="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;zGyro&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;zGyro&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-80451.c" line="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pitch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pitch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-80451.c" line="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-80606.c" line="16"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;isDLE&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;isDLE&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-80606.c" line="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;messageStarted&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;messageStarted&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-80606.c" line="18"/>
        </error>
        <error id="deallocret" severity="error" msg="Returning/dereferencing &amp;#039;ptr&amp;#039; after it is deallocated / released" verbose="Returning/dereferencing &amp;#039;ptr&amp;#039; after it is deallocated / released" cwe="672">
            <location file="post-80658.c" line="22" info=""/>
            <location file="post-80658.c" line="21" info=""/>
        </error>
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file="post-80731-3.c" line="11"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wild_pointer" verbose="Uninitialized variable: wild_pointer" cwe="457">
            <location file="post-80731-3.c" line="10"/>
        </error>
        <error id="returnDanglingLifetime" severity="error" msg="Returning pointer to local variable &amp;#039;this_will_not_work_the_way_you_hope&amp;#039; that will be invalid when returning." verbose="Returning pointer to local variable &amp;#039;this_will_not_work_the_way_you_hope&amp;#039; that will be invalid when returning." cwe="562">
            <location file="post-80731-4.c" line="4" info=""/>
            <location file="post-80731-4.c" line="2" info="Variable created here."/>
            <location file="post-80731-4.c" line="4" info="Address of variable taken here."/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;float&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;float&amp;#039;." cwe="686">
            <location file="post-81112-2.c" line="81"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;float&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;float&amp;#039;." cwe="686">
            <location file="post-81112-2.c" line="82"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;test==42&amp;#039; is always true" verbose="Condition &amp;#039;test==42&amp;#039; is always true" cwe="571">
            <location file="post-81271.c" line="8" info="Condition &amp;#039;test==42&amp;#039; is always true"/>
            <location file="post-81271.c" line="7" info="Assignment &amp;#039;test=42&amp;#039;, assigned value is 42"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;pointer==NULL&amp;#039; is always true" verbose="Condition &amp;#039;pointer==NULL&amp;#039; is always true" cwe="571">
            <location file="post-81461.c" line="11" info="Condition &amp;#039;pointer==NULL&amp;#039; is always true"/>
            <location file="post-81461.c" line="10" info="Assuming that condition &amp;#039;pointer!=NULL&amp;#039; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;argument1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;argument1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-81461.c" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;commaLocation&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;commaLocation&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-81461.c" line="20"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lasti&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lasti&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-81461.c" line="21"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;argument2&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;argument2&amp;#039; shadows outer variable" cwe="398">
            <location file="post-81461.c" line="82" info="Shadow variable"/>
            <location file="post-81461.c" line="19" info="Shadowed declaration"/>
        </error>
        <error id="returnDanglingLifetime" severity="error" msg="Returning pointer to local variable &amp;#039;buff&amp;#039; that will be invalid when returning." verbose="Returning pointer to local variable &amp;#039;buff&amp;#039; that will be invalid when returning." cwe="562">
            <location file="post-81464-2.c" line="4" info=""/>
            <location file="post-81464-2.c" line="2" info="Variable created here."/>
            <location file="post-81464-2.c" line="4" info="Array decayed to pointer here."/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." cwe="686">
            <location file="post-81975.c" line="11"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%ld in format string (no. 1) requires &amp;#039;long&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." cwe="686">
            <location file="post-81975.c" line="13"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." cwe="686">
            <location file="post-81975.c" line="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;number&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;number&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-82026.c" line="21"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-82124.c" line="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;retval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;retval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-8278.c" line="119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-8278.c" line="119"/>
        </error>
        <error id="constStatement" severity="warning" msg="Found suspicious operator &amp;#039;,&amp;#039;" verbose="Found suspicious operator &amp;#039;,&amp;#039;" cwe="398">
            <location file="post-83305.c" line="21"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;temp&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;temp&amp;#039; shadows outer variable" cwe="398">
            <location file="post-83308.c" line="55" info="Shadow variable"/>
            <location file="post-83308.c" line="11" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;part01&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;part01&amp;#039; shadows outer variable" cwe="398">
            <location file="post-83327.c" line="26" info="Shadow variable"/>
            <location file="post-83327.c" line="1" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;aData&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;aData&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-83936.c" line="21"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable" cwe="398">
            <location file="post-84126.c" line="20" info="Shadow variable"/>
            <location file="post-84126.c" line="4" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lsb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lsb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-84423.c" line="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-84423.c" line="4"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;tid1&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;tid1&amp;#039; to itself." cwe="398">
            <location file="post-84451.c" line="61"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;tid2&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;tid2&amp;#039; to itself." cwe="398">
            <location file="post-84451.c" line="72"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &amp;#039;tid3&amp;#039; to itself." verbose="Redundant assignment of &amp;#039;tid3&amp;#039; to itself." cwe="398">
            <location file="post-84451.c" line="83"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;i&amp;lt;2&amp;#039; is always true" verbose="Condition &amp;#039;i&amp;lt;2&amp;#039; is always true" cwe="571">
            <location file="post-84623.c" line="28" info="Condition &amp;#039;i&amp;lt;2&amp;#039; is always true"/>
            <location file="post-84623.c" line="20" info="Assignment &amp;#039;i=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: now" verbose="Uninitialized variable: now" cwe="457">
            <location file="post-84823-2.c" line="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;b&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;b&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-85036.c" line="3"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable" cwe="398">
            <location file="post-85132.c" line="20" info="Shadow variable"/>
            <location file="post-85132.c" line="4" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;led_state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;led_state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-85288-2.c" line="32"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;data=expected_header&amp;#039; is always true" verbose="Condition &amp;#039;data=expected_header&amp;#039; is always true" cwe="571">
            <location file="post-85328.c" line="27"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." verbose="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." cwe="686">
            <location file="post-85400.c" line="17"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%u in format string (no. 2) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." verbose="%u in format string (no. 2) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." cwe="686">
            <location file="post-85400.c" line="17"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%u in format string (no. 3) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." verbose="%u in format string (no. 3) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." cwe="686">
            <location file="post-85400.c" line="17"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%u in format string (no. 4) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." verbose="%u in format string (no. 4) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." cwe="686">
            <location file="post-85400.c" line="17"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%u in format string (no. 5) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." verbose="%u in format string (no. 5) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." cwe="686">
            <location file="post-85400.c" line="17"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." verbose="%u in format string (no. 1) requires &amp;#039;unsigned int&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." cwe="686">
            <location file="post-85400.c" line="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cycleCounter&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cycleCounter&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-85478.c" line="4"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." cwe="686">
            <location file="post-85518.c" line="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;led_state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;led_state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-85940.c" line="59"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;t1==10&amp;#039; is always false" verbose="Condition &amp;#039;t1==10&amp;#039; is always false" cwe="570">
            <location file="post-8600.c" line="41" info="Condition &amp;#039;t1==10&amp;#039; is always false"/>
            <location file="post-8600.c" line="38" info="t1 is incremented&amp;#039;, new value is 1"/>
            <location file="post-8600.c" line="34" info="Assignment &amp;#039;t1=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;t2==30&amp;#039; is always false" verbose="Condition &amp;#039;t2==30&amp;#039; is always false" cwe="570">
            <location file="post-8600.c" line="45" info="Condition &amp;#039;t2==30&amp;#039; is always false"/>
            <location file="post-8600.c" line="39" info="t2 is incremented&amp;#039;, new value is 1"/>
            <location file="post-8600.c" line="35" info="Assignment &amp;#039;t2=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;IDChar&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;IDChar&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-8617.c" line="5"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;CodesIR&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;CodesIR&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-8617.c" line="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;IRArray&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;IRArray&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="post-8617.c" line="8"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;sentence.substring(0,3)&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;sentence.substring(0,3)&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-86238.c" line="10"/>
        </error>
        <error id="literalWithCharPtrCompare" severity="warning" msg="String literal compared with variable &amp;#039;type&amp;#039;. Did you intend to use strcmp() instead?" verbose="String literal compared with variable &amp;#039;type&amp;#039;. Did you intend to use strcmp() instead?" cwe="595">
            <location file="post-86238.c" line="21"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The comparison &amp;#039;x == 2&amp;#039; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="post-86807.c" line="3" info=""/>
            <location file="post-86807.c" line="2" info="&amp;#039;x&amp;#039; is assigned value &amp;#039;2&amp;#039; here."/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;letter_value&amp;lt;=57&amp;#039; is redundant or the array &amp;#039;morse_table_digits[10]&amp;#039; is accessed at index 57, which is out of bounds." verbose="Either the condition &amp;#039;letter_value&amp;lt;=57&amp;#039; is redundant or the array &amp;#039;morse_table_digits[10]&amp;#039; is accessed at index 57, which is out of bounds." cwe="788">
            <location file="post-86902.c" line="42" info="Array index out of bounds"/>
            <location file="post-86902.c" line="40" info="Assuming that condition &amp;#039;letter_value&amp;lt;=57&amp;#039; is not redundant"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition and return expression &amp;#039;buffer[i][k]&amp;amp;(1&amp;lt;&amp;lt;j)&amp;#039;, return value is always 0" verbose="Identical condition and return expression &amp;#039;buffer[i][k]&amp;amp;(1&amp;lt;&amp;lt;j)&amp;#039;, return value is always 0" cwe="398">
            <location file="post-8978.c" line="32" info="Returning identical expression &amp;#039;buffer[i][k]&amp;amp;(1&amp;lt;&amp;lt;j)&amp;#039;"/>
            <location file="post-8978.c" line="23" info="If condition &amp;#039;buffer[i][k]&amp;amp;(1&amp;lt;&amp;lt;j)&amp;#039; is true, the function will return/exit"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561">
            <location file="post-9314.c" line="16"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable" cwe="398">
            <location file="post-9539.c" line="47" info="Shadow variable"/>
            <location file="post-9539.c" line="6" info="Shadowed declaration"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;incoming[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;incoming[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788">
            <location file="post-9630.c" line="22"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;incoming[2]&amp;#039; accessed at index 2, which is out of bounds." verbose="Array &amp;#039;incoming[2]&amp;#039; accessed at index 2, which is out of bounds." cwe="788">
            <location file="post-9630.c" line="27"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;myData&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;myData&amp;#039; shadows outer variable" cwe="398">
            <location file="post-9767.c" line="21" info="Shadow variable"/>
            <location file="post-9767.c" line="5" info="Shadowed declaration"/>
        </error>
    </errors>
</results>
